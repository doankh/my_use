<?xml version="1.0" encoding="UTF-8" standalone="no"?><root>  
    
    <DesignSmell id="EP01">
      <Name>Abstract class is subclass of a concrete class</Name>
      <Desc>An abstract class being subclass of a concrete class reflects poor design and a conflict in the model inheritance hierarchy</Desc>
      <Type>Essential Property</Type>
	  <Severity>Critical</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c|c.isAbstract and c. superClass-&gt;exists(c1|not c1.isAbstract))</OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c|c.isAbstract and c. superClass-&gt;exists(c1|not c1.isAbstract))</SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
    
    <DesignSmell id="EP02">
      <Name>Composition cycles</Name>
      <Desc>There exist composition cycles in the design.</Desc>
      <Type>Essential Property</Type>
	  <Severity>Critical</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c|(c.association.memberEnd-&gt; select(e|e.type&lt;&gt;c and e.isComposite).type-&gt;closure(c1|c1.association.memberEnd-&gt;select(e|e.type&lt;&gt;c1 and e.isComposite).type)) -&gt;includes(c))</OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c|(c.association.memberEnd-&gt; select(e|e.type&lt;&gt;c and e.isComposite).type-&gt;closure(c1|c1.association.memberEnd-&gt;select(e|e.type&lt;&gt;c1 and e.isComposite).type)) -&gt;includes(c))</SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
    <DesignSmell id="EP03">
      <Name>Composite end is a super class </Name>
      <Desc>Class contains one of its superclasses, with cardinality 1 in the composition end (this is not finitely satisfiable).</Desc>
      <Type>Essential Property</Type>
	  <Severity>Critical</Severity>
      <OCLexpression>Association.allInstances()-&gt;exists(
						a|a.memberEnd-&gt;exists(
							e1,e2|e1.lower = 1 and e1.isComposite and e1.type.oclAsType(Class).allParents()-&gt;includes(e2.type.oclAsType(Class))
						)
					)
		</OCLexpression>
      <SelectExpression>Association.allInstances()-&gt;select(
						a|a.memberEnd-&gt;exists(
							e1,e2|e1.lower = 1 and e1.isComposite and e1.type.oclAsType(Class).allParents()-&gt;includes(e2.type.oclAsType(Class))
						)
					)
		</SelectExpression>
      <Context>Association</Context>
    </DesignSmell>
	
    <DesignSmell id="EP04">
      <Name>Cycle reflexive association</Name>
      <Desc>Reflexive association that has two member ends: x1..x2 and y1..y2, where y1&gt;x2</Desc>
      <Type>Essential Property</Type>
	  <Severity>Critical</Severity>
      <OCLexpression>Association.allInstances()-&gt;exists(a|a.endType-&gt; asSet()-&gt;size() =1 and a.memberEnd-&gt; exists(e1,e2|e1.upper&lt;&gt;-1 and e1.upper&lt;e2.lower))</OCLexpression>
      <SelectExpression>Association.allInstances()-&gt;select(a|a.endType-&gt;asSet()-&gt;size() =1 and a.memberEnd-&gt;exists(e1,e2|e1.upper&lt;&gt;-1 and e1.upper&lt;e2.lower))</SelectExpression>
      <Context>Association</Context>
    </DesignSmell>
		
	<DesignSmell id="EP05">
      <Name>Isolated class</Name>
      <Desc>A design should not have an isolated class (a class which is not involved in an association or in the inheritance hierarchy)</Desc>
      <Type>Essential Property</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c | c.association-&gt; isEmpty() and c.superClass-&gt;isEmpty() and c.subClass-&gt;isEmpty())</OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c | c.association-&gt; isEmpty() and c.superClass-&gt;isEmpty() and c.subClass-&gt;isEmpty())</SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
	
	<DesignSmell id="EP06">
      <Name>A class is contained in two classes, and the cardinality in the composition end of one of them is 1 </Name>
      <Desc>A class is contained in two classes, and the cardinality in the composition end of one of them is 1</Desc>
      <Type>Essential Property</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Class.allInstances-&gt;exists(c|
				let E = c.association.memberEnd-&gt;select(type &lt;&gt; c and isComposite = true)
				in E-&gt;asSet()-&gt;size() &gt; 1 and E-&gt;exists(lower = 1)
			)
	  </OCLexpression>
      <SelectExpression>Class.allInstances-&gt;select(c|
				let E = c.association.memberEnd-&gt;select(type &lt;&gt; c and isComposite = true)
				in E-&gt;asSet()-&gt;size() &gt; 1 and E-&gt;exists(lower = 1)
			)
	  </SelectExpression>
      <Context>Attribute</Context>
    </DesignSmell>
	
	<DesignSmell id="BP01">
      <Name>A class is contained in two classes</Name>
      <Desc>A class is contained in two classes</Desc>
      <Type>Essential Property</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Class.allInstances-&gt;exists(c|
		c.association.memberEnd-&gt;select(type &lt;&gt; c and isComposite = true)-&gt;asSet()-&gt;size()&gt;1)
	  </OCLexpression>
      <SelectExpression>Class.allInstances-&gt;select(c|
		c.association.memberEnd-&gt;select(type &lt;&gt; c and isComposite = true)-&gt;asSet()-&gt;size()&gt;1)</SelectExpression>
      <Context>Attribute</Context>
    </DesignSmell>
	
	<DesignSmell id="BP02">
      <Name>Root class is not an abstract class</Name>
      <Desc>A root class which has subclasses and does not participate in any association, is not abstract. This kind of class should be 
		an abstract class</Desc>
      <Type>Best Practice</Type>
	  <Severity>Low</Severity>
      <OCLexpression>Class.allInstances-&gt;exists(c|c.superClass-&gt;isEmpty() and not c.subClass-&gt;isEmpty()
		and c.isAbstract = false and c.association-&gt;isEmpty())</OCLexpression>
      <SelectExpression>Class.allInstances-&gt;select(c|c.superClass-&gt;isEmpty() and not c.subClass-&gt;isEmpty()
		and c.isAbstract = false and c.association-&gt;isEmpty())</SelectExpression>
      <Context>Association</Context>
    </DesignSmell>
    
	<DesignSmell id="BP03">
      <Name>Duplicate attributes among all subclasses</Name>
      <Desc>An attribute is repeated (with the same definition) among all specific classes of a hierarchy</Desc>
      <Type>Best Practice</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Property.allInstances()-&gt;exists(p|p.class.superClass-&gt;exists(c|c.subClass-&gt;size()>=2 and c.subClass-&gt;forAll(c1|c1.ownedAttribute-&gt;exists(p1|p1.name = p.name and p1.type = p.type))))</OCLexpression>
      <SelectExpression>Property.allInstances()-&gt;select(p|p.class.superClass-&gt;exists(c|c.subClass-&gt;forAll(c1|c1.ownedAttribute-&gt;exists(p1|p1.name = p.name and p1.type = p.type))))</SelectExpression>
      <Context>Attribute</Context>
    </DesignSmell>
	
    <DesignSmell id="BP04">
      <Name>Abstract class has only one subclass</Name>
      <Desc>Abstract class is super to only one class (it nullifies the usefulness of the abstract class).</Desc>
      <Type>Best Practice</Type>
	  <Severity>Low</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c|c.isAbstract and c.subClass-&gt; size()=1)</OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c|c.isAbstract and c.subClass-&gt; size()=1)</SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
    <DesignSmell id="BP05">
      <Name>Redundant generalization paths</Name>
      <Desc>There exists redundant generalization paths. A generalization is redundant if it could be implied from other generalizations in the model</Desc>
      <Type>Best Practice</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>
		Generalization.allInstances()-&gt;exists(e|Generalization.allInstances()-&gt;exists(g|g&lt;&gt;e and g.specific = e.specific
			and (g.general.allParents()-&gt;includes(e.general) or g.general = e.general)
			)
		)
	  </OCLexpression>
      <SelectExpression>
	  Generalization.allInstances()-&gt;SELECT(e|Generalization.allInstances()-&gt;exists(g|g&lt;&gt;e and g.specific = e.specific
			and (g.general.allParents()-&gt;includes(e.general) or g.general = e.general)
			)
		)
	  </SelectExpression>
      <Context>Generalization</Context>
    </DesignSmell>
    
	<DesignSmell id="BP06">
      <Name>Descendant reference</Name>
      <Desc>A class that associates to a descendant class</Desc>
      <Type>Best Practice</Type>
	  <Severity>Low</Severity>
      <OCLexpression>Association.allInstances()-&gt;exists(a|a.endType-&gt; exists(c1,c2|c1.oclAsType(Class).subClass-&gt; closure(subClass)-&gt;includes(c2.oclAsType(Class))))</OCLexpression>
      <SelectExpression>Association.allInstances()-&gt;select(a|a.endType-&gt; exists(c1,c2|c1.oclAsType(Class).subClass-&gt; closure(subClass)-&gt;includes(c2.oclAsType(Class))))</SelectExpression>
      <Context>Association</Context>
    </DesignSmell>
	
    <DesignSmell id="ME01">
      <Name>Overloaded class</Name>
      <Desc>No class is overloaded with attributes (10-max by default)</Desc>
      <Type>Metrics</Type>
	  <Severity>Low</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c|c. metrics. NOA() &gt;10)</OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c|c. metrics. NOA() &gt;10)</SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
    <DesignSmell id="ME02">
      <Name>A class is really involved in so many associations</Name>
      <Desc>The number of associations in which the class participates should not be higher than ten</Desc>
      <Type>Metrics</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c|c.ownedAttribute.type-&gt;select(t|t.oclIsKindOf(Class))-&gt;asSet()-&gt;
		union(c.association.endType-&gt;excluding(c)-&gt;asSet())-&gt;asSet()-&gt;size()&gt;5)</OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c|c.ownedAttribute.type-&gt;select(t|t.oclIsKindOf(Class))-&gt;asSet()-&gt;
		union(c.association.endType-&gt;excluding(c)-&gt;asSet())-&gt;asSet()-&gt;size()&gt;5)</SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
    <DesignSmell id="ME03">
      <Name>Deep inheritance hierarchy</Name>
      <Desc>No hierarchy is too deep (5-level max by default) – a.k.a. depth of inheritance tree (DIT).</Desc>
      <Type>Metrics</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c|c. metrics. DIT() &gt;5)</OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c|c. metrics. DIT() &gt;5)</SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
    <DesignSmell id="ME04">
      <Name>Too many direct children</Name>
      <Desc>No class has too many direct children (10-max by default) - a.k.a. number of children (NOC).</Desc>
      <Type>Metrics</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c|c. metrics. NOC()&gt;10)</OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c|c. metrics. NOC()&gt;10)</SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
	
	<DesignSmell id="ME05">
      <Name>God class in the design</Name>
      <Desc>The class has more than 60 attributes and operations.</Desc>
      <Type>Design</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c|(c. metrics. NOA()  + c.metrics.NOM())&gt;60)</OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c|(c. metrics. NOA()  + c.metrics.NOM())&gt;60)</SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
	
    <DesignSmell id="NA01">
      <Name>Class naming PascalCase  convention</Name>
      <Desc>The name of classes should start with a capital letter (PascalCase convention)</Desc>
      <Type>Naming convention</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists (c|c.name.substring(1,1).toUpper() &lt;&gt; c.name.substring(1,1))</OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select (c|c.name.substring(1,1).toUpper() &lt;&gt; c.name.substring(1,1))</SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
    <DesignSmell id="NA02">
      <Name>Attributes are named after their feature class</Name>
      <Desc>Attributes are not named after their feature class (e.g., an attribute paperID in class Paper).</Desc>
      <Type>Naming convention</Type>
	  <Severity>Low</Severity>
      <OCLexpression>Property.allInstances()-&gt;exists (a|a.class-&gt; notEmpty() and a.name.substring(1,a.class.name.size()).toLower() = a.class.name. toLower())</OCLexpression>
      <SelectExpression>Property.allInstances()-&gt;select (a|a.class-&gt; notEmpty() and a.name.substring(1,a.class.name.size()).toLower() = a.class.name. toLower())</SelectExpression>
      <Context>Attribute</Context>
    </DesignSmell>
    
    <DesignSmell id="NA03">
      <Name>Class name is a Java keyword</Name>
      <Desc>Class name is not a Java keyword.</Desc>
      <Type>Naming convention</Type>
	  <Severity>Low</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c|
        let javaKeywords = Set{'abstract','continue','for','new','switch',
        'assert','default','goto','package','synchronized',
        'boolean','do','if','private','this',
        'break','double','implements','protected','throw',
        'byte','else','import','public','throws',
        'case','enum','instanceof','return','transient',
        'catch','extends','int','short','try',
        'char','final','interface','static','void',
        'class','finally','long','strictfp','volatile',
        'const','float','native','super','while', 'true', 'false', 'null'
        }
        in
        javaKeywords-&gt;includes(c.name))
      </OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c|
        let javaKeywords = Set{'abstract','continue','for','new','switch',
        'assert','default','goto','package','synchronized',
        'boolean','do','if','private','this',
        'break','double','implements','protected','throw',
        'byte','else','import','public','throws',
        'case','enum','instanceof','return','transient',
        'catch','extends','int','short','try',
        'char','final','interface','static','void',
        'class','finally','long','strictfp','volatile',
        'const','float','native','super','while', 'true', 'false', 'null'
        }
        in
        javaKeywords-&gt;includes(c.name))
       </SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
    
    <DesignSmell id="NA04">
      <Name>Class name is a C++ keyword</Name>
      <Desc>Class name is a C++ keyword.</Desc>
      <Type>Naming convention</Type>
	  <Severity>Low</Severity>
      <OCLexpression>Class.allInstances()-&gt;exists(c|
        let cppKeywords = Set{'asm','else','new','this',
        'auto','enum','operator','throw',
        'bool','explicit','private','true',
        'break','export','protected','try',
        'case','extern','public','typedef',
        'catch','false','register','typeid',
        'char','float','reinterpret_cast','typename',
        'class','for','return','union',
        'const','friend','short','unsigned',
        'const_cast','goto','signed','using',
        'continue','if','sizeof','virtual',
        'default','inline','static','void',
        'delete','int','static_cast','volatile',
        'do','long','struct','wchar_t',
        'double','mutable','switch','while',
        'dynamic_cast','namespace','template', 'true', 'false', 'null'
        }
        in cppKeywords-&gt;includes(c.name))
        </OCLexpression>
      <SelectExpression>Class.allInstances()-&gt;select(c|
        let cppKeywords = Set{'asm','else','new','this',
        'auto','enum','operator','throw',
        'bool','explicit','private','true',
        'break','export','protected','try',
        'case','extern','public','typedef',
        'catch','false','register','typeid',
        'char','float','reinterpret_cast','typename',
        'class','for','return','union',
        'const','friend','short','unsigned',
        'const_cast','goto','signed','using',
        'continue','if','sizeof','virtual',
        'default','inline','static','void',
        'delete','int','static_cast','volatile',
        'do','long','struct','wchar_t',
        'double','mutable','switch','while',
        'dynamic_cast','namespace','template', 'true', 'false', 'null'
        }
        in cppKeywords-&gt;includes(c.name))
      </SelectExpression>
      <Context>Class</Context>
    </DesignSmell>
    
	<DesignSmell id="NA05">
      <Name>Attribute naming camelCase  convention</Name>
      <Desc>Attribute (association ends) names should start with a lowercase letter.</Desc>
      <Type>Naming convention</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Property. allInstances()-&gt;exists (p|p.class-&gt;notEmpty() and p.name.substring(1,1).toLower() &lt;&gt; p.name.substring(1,1))</OCLexpression>
      <SelectExpression>Property. allInstances()-&gt;select (p|p.class-&gt;notEmpty() and p.name.substring(1,1).toLower() &lt;&gt; p.name.substring(1,1))</SelectExpression>
      <Context>Attribute</Context>
    </DesignSmell>
    <DesignSmell id="NA06">
      <Name>Operation naming camelCase  convention</Name>
      <Desc>Operation names should start with a lower case letter.</Desc>
      <Type>Naming convention</Type>
	  <Severity>Medium</Severity>
      <OCLexpression>Operation. allInstances()-&gt;exists (op|op.name.substring(1,1).toLower() &lt;&gt; op.name.substring(1,1))</OCLexpression>
      <SelectExpression>Operation. allInstances()-&gt;select (op|op.name.substring(1,1).toLower() &lt;&gt; op.name.substring(1,1))</SelectExpression>
      <Context>Operation</Context>
    </DesignSmell>
    
</root>